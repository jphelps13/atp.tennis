mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = cum_matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(log(log(eg$cum_matches)), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(log(eg$cum_matches)), eg$fit)
plot(log(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(eg$cum_matches), eg$fit)
plot(eg$age, eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(eg$age, eg$fit)
eg$wins <- eg$matches * eg$win_perc
eg$fit_wins <- eg$matches * eg$fit
plot(eg$cum_matches, cumsum(eg$wins)/eg$cum_matches, col = "darkgrey")
lines(eg$cum_matches, cumsum(eg$fit_wins)/eg$cum_matches)
input_dt = copy(info_dt)
# add surface
input_dt[, c("surface", "tourney_level") := NULL]
input_dt <- merge(input_dt,
unique(tournament_dt[, .(unique_tourney_id, surface,
tourney_level)]),
by = "unique_tourney_id", all.x = TRUE)
input_dt <- input_dt[, year := as.numeric(year)]
# weighting tournaments
input_dt[, tourney_level := as.character(tourney_level)]
weight_dt <- data.table(tourney_level = c("G", "A", "M", "F", "C"),
weight = c(4, 1, 2, 2.5, 1))
setkeyv(weight_dt, "tourney_level")
setkeyv(input_dt, "tourney_level")
input_dt <- weight_dt[input_dt]
input_dt[is.na(weight), weight := 1]
setorder(input_dt, +age)
input_dt[, cum_matches := cumsum(matches), by = simple_name]
input_dt[, cum_matches := cumsum(matches), by = simple_name]
player <- "roger_federer"
player <- "rafael_nadal"
player <- "andy_roddick"
player <- "andre_agassi"
eg <- input_dt[simple_name == player]
# penalise it when cba
#   mod1 <- glmnet(win_perc ~ log(cum_matches) + cum_matches + tourney_level,
#                  data = eg,
#                  family = quasibinomial(),
#                  weights = matches)
#   summary(mod1)
mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = cum_matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(log(log(eg$cum_matches)), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(log(eg$cum_matches)), eg$fit)
plot(log(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(eg$cum_matches), eg$fit)
plot(eg$age, eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(eg$age, eg$fit)
eg$wins <- eg$matches * eg$win_perc
eg$fit_wins <- eg$matches * eg$fit
plot(eg$cum_matches, cumsum(eg$wins)/eg$cum_matches, col = "darkgrey")
lines(eg$cum_matches, cumsum(eg$fit_wins)/eg$cum_matches)
input_dt = copy(info_dt)
input_dt
# add surface
input_dt[, c("surface", "tourney_level") := NULL]
input_dt <- merge(input_dt,
unique(tournament_dt[, .(unique_tourney_id, surface,
tourney_level)]),
by = "unique_tourney_id", all.x = TRUE)
input_dt <- input_dt[, year := as.numeric(year)]
# weighting tournaments
input_dt[, tourney_level := as.character(tourney_level)]
weight_dt <- data.table(tourney_level = c("G", "A", "M", "F", "C"),
weight = c(4, 1, 2, 2.5, 1))
setkeyv(weight_dt, "tourney_level")
setkeyv(input_dt, "tourney_level")
input_dt <- weight_dt[input_dt]
input_dt[is.na(weight), weight := 1]
setorder(input_dt, +age)
input_dt[, cum_matches := cumsum(matches), by = simple_name]
input_dt
player <- "roger_federer"
player <- "rafael_nadal"
player <- "andy_roddick"
player <- "andre_agassi"
eg <- input_dt[simple_name == player]
head(eg)
mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(log(log(eg$cum_matches)), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(log(eg$cum_matches)), eg$fit)
plot(log(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(eg$cum_matches), eg$fit)
mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = cum_matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(log(log(eg$cum_matches)), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(log(eg$cum_matches)), eg$fit)
plot(log(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(eg$cum_matches), eg$fit)
mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = cum_matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(eg$cum_matches), eg$fit)
mod1 <- glm(win_perc ~  log(cum_matches) + cum_matches,
data = eg,
family = quasibinomial(),
weights = matches)
summary(mod1)
eg$fit <- predict(mod1, type = "response")
plot(eg$cum_matches, eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(eg$cum_matches, eg$fit)
plot(log(eg$cum_matches), eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(log(eg$cum_matches), eg$fit)
plot(eg$age, eg$win_perc, cex = sqrt(eg$matches),
col = "darkgrey")
lines(eg$age, eg$fit)
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches)*simple_name +
cum_matches*simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches) +
cum_matches + simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches) +
cum_matches + age + simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches) +
cum_matches + age + log(age) + simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches) +
cum_matches:simple_name + age:simple_name + log(age) + simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches):simple_name +
cum_matches:simple_name + age:simple_name + log(age):simple_name +
simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- unique(input_dt$simple_name)[1:24]
i <- players[1]
par(mfrow = c(2,2))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
players <- unique(input_dt$simple_name)[1:45]
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
# input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches)*simple_name +
cum_matches*simple_name + age*simple_name + log(age)*simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- unique(input_dt$simple_name)[1:45]
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
ggplot(input_dt, aes(x = cum_matches, y = cum_fit_wins/cum_matches, col = simple_name)) +
geom_line() + theme_minimal()
players <- sort(unique(input_dt$simple_name))
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
input_dt <- input_dt[cum_matches >= 20,]
mod1 <- glm(win_perc ~ log(cum_matches)*simple_name +
cum_matches*simple_name + age*simple_name + log(age)*simple_name,
data = input_dt,
family = quasibinomial(),
weights = matches)
summary(mod1)
input_dt[, fit :=  predict(mod1, type = "response")]
input_dt[, wins := matches * win_perc]
input_dt[, fit_wins := matches * fit]
input_dt[, cum_wins := cumsum(wins), by = simple_name]
input_dt[, cum_fit_wins := cumsum(fit_wins), by = simple_name]
players <- sort(unique(input_dt$simple_name))
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$cum_wins/eg$cum_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$cum_fit_wins/eg$cum_matches)
}
input_dt[, roll_matches := rollapply(matches, 50, sum), by = simple_name]
warnings()
?rollapply
input_dt[, roll_matches := rollapply(matches, 25, sum), by = simple_name]
input_dt[, roll_matches := rollapply(matches, 25, sum), by = simple_name]
input_dt[, roll_wins := rollapply(wins, 25, sum), by = simple_name]
input_dt[, roll_fit_wins := rollapply(fit_wins, 25, sum), by = simple_name]
i
input_dt[, roll_matches := rollapply(matches, 25, sum), by = simple_name]
input_dt[, roll_wins := rollapply(wins, 25, sum), by = simple_name]
input_dt[, roll_fit_wins := rollapply(fit_wins, 25, sum), by = simple_name]
players <- sort(unique(input_dt$simple_name))
i <- players[1]
eg <- input_dt[simple_name == i]
plot(eg$roll_matches, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$roll_matches, eg$roll_fit_wins/eg$roll_matches)
eg$roll_matches
plot(eg$cum_matches, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$roll_fit_wins/eg$roll_matches)
players <- sort(unique(input_dt$simple_name))
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$roll_fit_wins/eg$roll_matches)
}
i <- "pat_cash"
eg <- input_dt[simple_name == i]
eg[310:330,]
eg[cum_matches > 310,]
tail(eg)
tail(eg, 26)
head(eg)
?rollapply
args(rollapply)
input_dt[, roll_matches := rollapply(matches, 25, sum, partial = FALSE),
by = simple_name]
input_dt[, roll_wins := rollapply(wins, 25, sum, partial = FALSE),
by = simple_name]
input_dt[, roll_fit_wins := rollapply(fit_wins, 25, sum, partial = FALSE),
by = simple_name]
players <- sort(unique(input_dt$simple_name))
i <- players[1]
eg <- input_dt[simple_name == i]
eg$roll_matches
eg$roll_wins
?rollapply
rollapply(1:5, 2, sum)
rollapply(1:5, 3, sum)
rollapply(1:5, 3, sum, fill = NA)
input_dt[, roll_matches := rollapply(matches, 25, sum, fill = NA),
by = simple_name]
input_dt[, roll_wins := rollapply(wins, 25, sum, fill = NA),
by = simple_name]
input_dt[, roll_fit_wins := rollapply(fit_wins, 25, sum, fill = NA),
by = simple_name]
players <- sort(unique(input_dt$simple_name))
i <- players[1]
eg <- input_dt[simple_name == i]
eg
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$cum_matches, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$cum_matches, eg$roll_fit_wins/eg$roll_matches)
}
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i]
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$age, eg$roll_fit_wins/eg$roll_matches)
}
eg <- input_dt[simple_name == i & !is.na(roll_matches)]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i & !is.na(roll_matches)]
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$age, eg$roll_fit_wins/eg$roll_matches)
}
N <- 20
input_dt[, roll_matches := rollapply(matches, N, sum, fill = NA),
by = simple_name]
input_dt[, roll_wins := rollapply(wins, N, sum, fill = NA),
by = simple_name]
input_dt[, roll_fit_wins := rollapply(fit_wins, N, sum, fill = NA),
by = simple_name]
players <- sort(unique(input_dt$simple_name))
i <- players[1]
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i & !is.na(roll_matches)]
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 20, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$age, eg$roll_fit_wins/eg$roll_matches)
}
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 60, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 40, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i & !is.na(roll_matches)]
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 40, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$age, eg$roll_fit_wins/eg$roll_matches)
}
par(mfrow = c(3,3))
for(i in players){
eg <- input_dt[simple_name == i & !is.na(roll_matches)]
plot(eg$age, eg$roll_wins/eg$roll_matches,
col = rgb(0, 100, 20, 30, maxColorValue=255),
pch = 16,
cex = 2,
main = i)
lines(eg$age, eg$roll_fit_wins/eg$roll_matches)
}
